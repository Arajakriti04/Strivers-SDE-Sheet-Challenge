#include <bits/stdc++.h> 
void prepareAdjlist(unordered_map<int,set<int>> &adjlist,vector<pair<int, int>>& edges){
    for(int i=0;i<edges.size(); i++){
        int u=edges[i].first;
        int v=edges[i].second;

        adjlist[u].insert(v);
        adjlist[v].insert(u);
    }
}

void bfs(unordered_map<int,set<int>>& adjlist,unordered_map<int, bool> &visited,vector<int>& ans,int node){
    queue<int>q;
    q.push(node);
    visited[node]=true;
    while(!q.empty()){
        int front=q.front();
        q.pop();

        ans.push_back(front);

        for(auto it:adjlist[front]){
            if (!visited[it]){
                q.push(it);
                visited[it]=true;
            }
        }
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
     unordered_map<int,set<int>> adjlist;
     vector<int> ans;
     unordered_map<int, bool> visited;
     prepareAdjlist(adjlist,edges);
       for(int i=0; i<vertex; i++){
         if (!visited[i]) {

           bfs(adjlist, visited, ans, i);
         }
       }
       return ans;

}
